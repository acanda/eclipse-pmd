New and noteworthy


New Rules

    The Java rule DoubleBraceInitialization (java-bestpractices) detects non static initializers in anonymous classes also known as “double brace initialization”. This can be problematic, since a new class file is generated and object holds a strong reference to the surrounding class.

    Note: This rule is also part of the Java quickstart ruleset (rulesets/java/quickstart.xml).


Modified Rules

    The Java rule UnusedPrivateField (java-bestpractices) now ignores by default fields, that are annotated with the Lombok experimental annotation @Delegate. This can be customized with the property ignoredAnnotations.

    The Java rule SingularField (java-design) now ignores by default fields, that are annotated with the Lombok experimental annotation @Delegate. This can be customized with the property ignoredAnnotations.

    The Java rules UnsynchronizedStaticFormatter and UnsynchronizedStaticDateFormatter (java-multithreading) now prefer synchronized blocks by default. They will raise a violation, if the synchronization is implemented on the method level. To allow the old behavior, the new property allowMethodLevelSynchronization can be enabled.

    The Java rule UseUtilityClass (java-design) has a new property ignoredAnnotations. By default, classes that are annotated with Lombok’s @UtilityClass are ignored now.

    The Java rule NonStaticInitializer (java-errorprone) does not report non static initializers in anonymous classes anymore. For this use case, there is a new rule now: DoubleBraceInitialization (java-bestpractices).

    The Java rule CommentDefaultAccessModifier (java-errorprone) now by default searches for any unclosed java.lang.AutoCloseable resource. This includes now the standard java.io.*Stream classes. Previously only SQL-related resources were considered by this rule. The types can still be configured via the types property. Some resources do not need to be closed (e.g. ByteArrayOutputStream). These exceptions can be configured via the new property allowedResourceTypes. In order to restore the old behaviour, just remove the type java.lang.AutoCloseable from the types property and keep the remaining SQL-related classes.


Deprecated Rules

    The Java rule AvoidFinalLocalVariable (java-codestyle) has been deprecated and will be removed with PMD 7.0.0. The rule is controversial and also contradicts other existing rules such as LocalVariableCouldBeFinal. If the goal is to avoid defining constants in a scope smaller than the class, then the rule AvoidDuplicateLiterals should be used instead.


Fixed Issues

    apex
        #1664: [apex] False positive ApexSharingViolationsRule, unsupported Apex feature
    java
        #1848: [java] Local classes should preserve their modifiers
    java-bestpractices
        #1703: [java] UnusedPrivateField on member annotated with lombok @Delegate
        #1845: [java] Regression in MethodReturnsInternalArray not handling enums
        #1854: [java] Rule to check for double brace initialisation
    java-codestyle
        #1612: [java] Deprecate AvoidFinalLocalVariable
        #1880: [java] CommentDefaultAccessModifier should be configurable for top-level classes
    java-design
        #1094: [java] UseUtilityClass should be LombokAware
    java-errorprone
        #1000: [java] The rule CloseResource should deal with IO stream as default
        #1853: [java] False positive for NonStaticInitializer in anonymous class
    java-multithreading
        #1814: [java] UnsynchronizedStaticFormatter documentation and implementation wrong
        #1815: [java] False negative in UnsynchronizedStaticFormatter
    plsql
        #1828: [plsql] Parentheses stopped working
        #1850: [plsql] Parsing errors with INSERT using returning or records and TRIM expression
        #1873: [plsql] Expression list not working
        #1878: [pslql] ParseException when parsing USING
        #1879: [pslql] ParseException when parsing LEFT JOIN


External Contributions

    #1482: [java] Explain the existence of AvoidFinalLocalVariable in it’s description - Karl-Philipp Richter
    #1792: [java] Added lombok.experimental to AbstractLombokAwareRule - jakivey32
    #1808: [plsql] Fix PL/SQL Syntax errors - Hugo Araya Nash
    #1829: [java] Fix false negative in UnsynchronizedStaticFormatter - Srinivasan Venkatachalam
    #1847: [java] Regression in MethodReturnsInternalArray not handling enums - Artem
    #1863: [plsql] Add Table InlineConstraint - Hugo Araya Nash
    #1864: [plsql] Add support for Subquery Views - Hugo Araya Nash
    #1865: [plsql] Add Support for Extract Expression - Hugo Araya Nash
    #1874: [plsql] Add parenthesis equation support for Update - Hugo Araya Nash
    #1876: [plsql] Datetime support for queries - Hugo Araya Nash
    #1883: [plsql] Fix #1873 Expression list not working - Hugo Araya Nash
    #1884: [plsql] fix #1878 Support explicit INNER word for INNER JOIN - Hugo Araya Nash
    #1885: [plsql] Correct case expression - Hugo Araya Nash
    #1886: [plsql] Support table alias for Insert Clause - Hugo Araya Nash

